# Generated by Django 2.1.7 on 2019-03-02 11:47

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import src.beria.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. 255 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-_]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], verbose_name='email address')),
                ('username', models.CharField(blank=True, max_length=64, null=True, verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='last name')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='middle name')),
                ('birth_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='year of birth')),
                ('birth_month', models.PositiveIntegerField(blank=True, null=True, verbose_name='month of birth')),
                ('birth_day', models.PositiveIntegerField(blank=True, null=True, verbose_name='day of birth')),
                ('sex', models.CharField(choices=[('M', 'male'), ('F', 'female')], default='M', max_length=1, verbose_name='sex')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='phone number')),
                ('address', models.CharField(blank=True, max_length=256, null=True, verbose_name='shipping address')),
                ('title', models.CharField(blank=True, max_length=64, null=True, verbose_name='title')),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='latitude')),
                ('lng', models.FloatField(blank=True, null=True, verbose_name='longitude')),
                ('want_notify_email', models.BooleanField(default=False, verbose_name='email notification')),
                ('want_notify_news', models.BooleanField(default=False, verbose_name='monthly newsletter')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', src.beria.managers.CustomUserManager()),
            ],
        ),
    ]
